# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      MYSQL_HOST: 127.0.0.1
      MYSQL_DATABASE: example
      MYSQL_USER: username
      MYSQL_PASSWORD: password
      IMAGE_NAME: devops_cicd_final
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_RANDOM_ROOT_PASSWORD: yes
        ports:
          - 3306:3306
        options: --health-cmd "mysqladmin ping" --health-interval 15s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Setup & test DB
        run: |
          for sql_script in `ls ./sql/*.sql`;
          do
            echo "loading: $sql_script" 
            mysql -h$MYSQL_HOST -u$MYSQL_USER -p$MYSQL_PASSWORD -D$MYSQL_DATABASE < $sql_script;
          done
          mysql --version
          mysql -h$MYSQL_HOST -D$MYSQL_DATABASE -u$MYSQL_USER -p$MYSQL_PASSWORD -e 'select * from products;'

      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest tests/
      - name: Build coverage report
        run: |
          pytest --cov=shop_app --cov-branch tests
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "::set-output name=short_sha::$calculatedSha"
      - name: Login to image repository
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USER}}
          password: ${{ secrets.DOCKER_PASSWORD }}  
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/devops21-23/devops_cicd_final:${{ steps.extract_branch.outputs.branch }}-${{ steps.vars.outputs.short_sha }}
          labels: ${{ steps.meta.outputs.lables }}
